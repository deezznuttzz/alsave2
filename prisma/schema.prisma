// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int    @id @default(autoincrement())
  name         String @default("Unknown") // Default value for existing rows
  email        String @unique
  password     String
  refreshToken String? @db.Text // Allow large refresh tokens
  subscription Json?            // Store the subscription as JSON
  favfoods     FavFood[]
  favgroceries FavGroceries[]
  favfoodplace FavFoodPlace[]
  favgrocer    FavGrocer[]
}

model FavFood {
  id      Int    @id @default(autoincrement())
  type    String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  place   String?
}

model FavGroceries {
  id      Int    @id @default(autoincrement())
  type    String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  place   String?
}

model FavFoodPlace {
  id      Int    @id @default(autoincrement())
  place   String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

model FavGrocer {
  id      Int    @id @default(autoincrement())
  place   String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
}

enum Userroles {
  User
  Owner
}

model Places {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  location  String
  type      String
  imagepath String
  specialsById   Special[] @relation("PlaceById")   // Relation by ID
  specialsByName Special[] @relation("PlaceByName") // Relation by Name
}

model Special {
  id        Int        @id @default(autoincrement())
  name      String
  type      String
  foodorgroc FoodOrGroc
  imagepath String
  from      String
  till      String
  before    Float
  after     Float
  placesId  Int
  places    Places     @relation("PlaceById", fields: [placesId], references: [id]) // Relation by ID
  PlaceName String
  placeNa   Places     @relation("PlaceByName", fields: [PlaceName], references: [name]) // Relation by name
}

enum FoodOrGroc {
  Food
  Groc
  Both
}
